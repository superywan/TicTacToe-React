{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","squares","includes","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","lastMove","step","current","winInfo","moves","map","move","col","Math","floor","desc","jumpTo","status","isDraw","reverse","handleClick","line","handleSorting","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c364dd7a.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\n// Function Component\nfunction Square(props) {\n  const className = \"square\" + (props.highlight ? \" squareHighlight\" : \"\");\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highlight={winLine && winLine.includes(i)}\n      />\n    );\n  }\n\n  render() {\n    const boardSize = 3;\n    let squares = [];\n    for (let i = 0; i < boardSize; i++) {\n      let row = [];\n      for (let j = 0; j < boardSize; j++) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n      squares.push(\n        <div key={i} className=\"board-row\">\n          {row}\n        </div>\n      );\n    }\n    return <div>{squares}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          lastMove: i,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  handleSorting() {\n    this.setState({\n      isAscending: !this.state.isAscending,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winInfo = calculateWinner(current.squares);\n    const winner = winInfo.winner;\n\n    const moves = history.map((step, move) => {\n      const lastMove = step.lastMove;\n      const col = 1 + (lastMove % 3);\n      const row = 1 + Math.floor(lastMove / 3);\n      const desc = move\n        ? `Go to move #${move} (${col}, ${row})`\n        : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button\n            className={move === stepNumber ? \"current-selected-number\" : \"\"}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    if (winInfo.isDraw) {\n      status = \"DRAW!\";\n    }\n    if (winner) {\n      status = \"Winner: \" + winner;\n    }\n\n    const isAscending = this.state.isAscending;\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winLine={winInfo.line}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.handleSorting()}>\n            {isAscending ? \"Descending\" : \"Ascending\"}\n          </button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n      };\n    }\n  }\n\n  let isDraw = true;\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw,\n  };\n}\n"],"sourceRoot":""}